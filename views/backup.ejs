<!DOCTYPE html>

<html dir="rtl" lang="ar">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>نظام إدارة الإجازات المرضية - النسخ الاحتياطي</title>
<!-- Bootstrap 5.3 RTL -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.rtl.min.css" rel="stylesheet"/>
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet"/>
<!-- Modern Styles -->
<link href="css/sahacss/modern-styles.css" rel="stylesheet">

</head>
<body>
<!-- Header -->
<%- include ('./nav/nav') %>
<!-- Main Content -->
<div class="main-content">
<div class="container-fluid">
<!-- Page Header -->
<div class="welcome-section fade-in mb-4">
<div class="welcome-header">
<h2>
<i class="fas fa-cloud-upload-alt me-2"></i>
                        النسخ الاحتياطي
                    </h2>
<p class="mb-0">إدارة النسخ الاحتياطية لقاعدة البيانات والملفات</p>
</div>
</div>

<!-- Quick Actions -->
<div class="row mb-4">
<div class="col-md-6">
<div class="card text-center fade-in">
<div class="card-body">
<i class="fas fa-plus-circle text-primary mb-3" style="font-size: 3rem;"></i>
<h5>إنشاء نسخة احتياطية</h5>
    <button class="btn btn-primary" onclick="createBackup()" id="backupBtn" disabled>
      <i class="fas fa-cloud-upload-alt me-2"></i>
      إنشاء الآن
    </button>
  
    <div id="backupStatus" class="mt-3 fw-bold text-secondary">في انتظار النسخ الاحتياطي...</div>
  </div>
</div>
</div>
<div class="col-md-6">
    <div class="card fade-in">
      <div class="card-body">
        <h5>النسخ الاحتياطية السابقة</h5>
        <select id="backupList" class="form-select mb-3">
        </select>
        <button class="btn btn-primary" onclick="downloadSelectedBackup()" id="downloadSelectedBtn" disabled>
            <i class="fas fa-download me-2"></i> تحميل النسخة المحددة
          </button>
        <div id="restoreSelectedStatus" class="mt-3 fw-bold text-muted"></div>
      </div>
    </div>
  </div>

</div>

<!-- Backup List -->
<div class="card scale-in">
<div class="card-header d-flex justify-content-between align-items-center">
<h4 class="mb-0">
<i class="fas fa-list me-2"></i>
                        قائمة النسخ الاحتياطية
                    </h4>
<div>

</div>
</div>
<div class="card-body">
<div class="table-responsive">
<table class="table table-hover" id="backupTable">
<thead>
<tr>
<th>اسم النسخة</th>
<th>تاريخ الإنشاء</th>
<th>النوع</th>

</tr>
</thead>
<tbody id="backupTableBody">
</tbody>
</table>
</div>
</div>
</div>






</div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
     const navToggle = document.getElementById('navToggle');
            const floatingNav = document.getElementById('floatingNav');
            
            // Navigation toggle functionality
            navToggle.addEventListener('click', function() {
                floatingNav.classList.toggle('show');
                
                const icon = navToggle.querySelector('i');
                if (floatingNav.classList.contains('show')) {
                    icon.className = 'fas fa-times';
                } else {
                    icon.className = 'fas fa-bars';
                }
            });

            // Close floating nav when clicking outside
            document.addEventListener('click', function(event) {
                if (!navToggle.contains(event.target) && !floatingNav.contains(event.target)) {
                    floatingNav.classList.remove('show');
                    const icon = navToggle.querySelector('i');
                    icon.className = 'fas fa-bars';
                }
            });

   async function createBackup() {
    const status = document.getElementById('backupStatus');
    const button = document.getElementById('backupBtn');

    // ✅ تعطيل الزر وتحديث الحالة
    button.disabled = true;
    status.innerText = "جاري إنشاء النسخة الاحتياطية...";
    status.className = "mt-3 fw-bold text-warning";

    // 🕒 محاكاة التأخير (3 ثواني)
    await new Promise(resolve => setTimeout(resolve, 3000));

    // ✅ تنفيذ النسخ الفعلي بعد التأخير
    fetch('/backup', { method: 'POST' })
      .then(res => res.text())
      .then(message => {
        status.innerText = message;
        status.className = "mt-3 fw-bold text-success";
        button.disabled = false;
      })
      .catch(err => {
        status.innerText = "حدث خطأ أثناء النسخ الاحتياطي!";
        status.className = "mt-3 fw-bold text-danger";
        button.disabled = false;
      });
  }



fetch('/api/backups') // استبدل بـ المسار الصحيح في سيرفرك
    .then(response => response.json())
    .then(backups => {
      const select = document.getElementById('backupList');
      const downloadBtn = document.getElementById('downloadSelectedBtn');

      select.innerHTML = '<option disabled selected>اختر نسخة احتياطية</option>';
      backups.forEach(backup => {
        const option = document.createElement('option');
        option.value = backup.name;
        option.textContent = backup.name;
        select.appendChild(option);
      });

      select.addEventListener('change', () => {
        downloadBtn.disabled = false;
      });
    });

  // عند النقر على الزر تحميل النسخة المحددة
  function downloadSelectedBackup() {
    const selectedFile = document.getElementById('backupList').value;
    if (!selectedFile) return;

    const downloadUrl = `/api/download/${encodeURIComponent(selectedFile)}`;
    
    // فتح رابط التحميل في نافذة جديدة أو تنزيل مباشر
    const link = document.createElement('a');
    link.href = downloadUrl;
    link.download = selectedFile;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }


function loadBackupTable() {
  fetch('/api/backup/list')
    .then(response => response.json())
    .then(data => {
      const tbody = document.getElementById('backupTableBody');
      tbody.innerHTML = '';

      data.forEach(backup => {

        function extractDateFromFilename(filename) {
  const match = filename.match(/^backup-(\d{4}-\d{2}-\d{2})T(\d{2}-\d{2}-\d{2})/);
  if (!match) return null;

  const date = match[1]; // 2025-08-02
  const time = match[2].replace(/-/g, ':'); // 01:59:12
  return `${date} ${time}`;
}

// مثال:
const filename = backup.name;
const extension = filename.split('.').pop(); // => "sql"
const readableDate = extractDateFromFilename(filename);
        const row = document.createElement('tr');

        const statusColor = backup.status === 'مكتمل' ? 'success' : 'warning';
        const typeColor = 
          backup.type === 'تلقائي' ? 'primary' : 
          backup.type === 'مجدول' ? 'info' : 'secondary';

        row.innerHTML = `
          <td>${backup.name}</td>
          <td>${readableDate}</td>
          <td><span class="badge bg-${typeColor}">${extension}</span></td>
        `;
        tbody.appendChild(row);
      });
    })
    .catch(error => {
      console.error('فشل تحميل النسخ:', error);
    });
}

// تحميل الجدول عند فتح الصفحة
window.addEventListener('load', () => {
  document.getElementById('backupBtn').disabled = false;
  loadBackupTable();
});
// تحديث القائمة يدوياً عند الضغط على زر "تحديث القائمة"
function refreshBackupList() {
  loadBackupTable();
}
// تحديث القائمة يدوياً عند الضغط على زر "تحديث القائمة"
function refreshBackupList() {
  loadBackupTable();
}
        // ===== Backend Simulation System =====
        // class BackupSystem {
        //     constructor() {
        //         this.backups = [
        //             {
        //                 id: 1,
        //                 filename: 'backup_2024_01_21_10_30.sql',
        //                 date: '2024-01-21 10:30:15',
        //                 size: '2.4 GB',
        //                 type: 'تلقائي',
        //                 status: 'مكتمل',
        //                 verified: true,
        //                 encrypted: true,
        //                 compressed: true
        //             },
        //             {
        //                 id: 2,
        //                 filename: 'backup_2024_01_20_02_00.sql',
        //                 date: '2024-01-20 02:00:00',
        //                 size: '2.3 GB',
        //                 type: 'مجدول',
        //                 status: 'مكتمل',
        //                 verified: true,
        //                 encrypted: false,
        //                 compressed: true
        //             },
        //             {
        //                 id: 3,
        //                 filename: 'backup_2024_01_19_15_45.sql',
        //                 date: '2024-01-19 15:45:30',
        //                 size: '2.2 GB',
        //                 type: 'يدوي',
        //                 status: 'جاري التحقق',
        //                 verified: false,
        //                 encrypted: true,
        //                 compressed: false
        //             }
        //         ];
                
        //         this.schedules = [
        //             {
        //                 id: 1,
        //                 name: 'نسخة احتياطية يومية',
        //                 type: 'daily',
        //                 time: '02:00',
        //                 backupType: 'full',
        //                 enabled: true,
        //                 compress: true,
        //                 encrypt: true
        //             },
        //             {
        //                 id: 2,
        //                 name: 'نسخة احتياطية أسبوعية',
        //                 type: 'weekly',
        //                 time: '01:00',
        //                 backupType: 'full',
        //                 enabled: true,
        //                 compress: true,
        //                 encrypt: false
        //             },
        //             {
        //                 id: 3,
        //                 name: 'نسخة احتياطية شهرية',
        //                 type: 'monthly',
        //                 time: '00:00',
        //                 backupType: 'full',
        //                 enabled: true,
        //                 compress: true,
        //                 encrypt: true
        //             }
        //         ];
                
        //         this.settings = {
        //             autoBackupEnabled: true,
        //             backupFrequency: 'weekly',
        //             backupTime: '02:00',
        //             backupPath: '/var/backups/database/',
        //             retentionDays: 30,
        //             encryptBackups: true,
        //             compressBackups: true
        //         };
                
        //         this.loadFromStorage();
        //     }
            
        //     // Local Storage Management
        //     saveToStorage() {
        //         localStorage.setItem('backupSystem', JSON.stringify({
        //             backups: this.backups,
        //             schedules: this.schedules,
        //             settings: this.settings
        //         }));
        //     }
            
        //     loadFromStorage() {
        //         const stored = localStorage.getItem('backupSystem');
        //         if (stored) {
        //             const data = JSON.parse(stored);
        //             this.backups = data.backups || this.backups;
        //             this.schedules = data.schedules || this.schedules;
        //             this.settings = data.settings || this.settings;
        //         }
        //     }
            
        //     // Backup Operations
        //     createBackup(options = {}) {
        //         return new Promise((resolve, reject) => {
        //             const newBackup = {
        //                 id: Date.now(),
        //                 filename: `backup_${new Date().toISOString().slice(0, 19).replace(/[-:]/g, '_').replace('T', '_')}.sql`,
        //                 date: new Date().toLocaleString('ar-SA'),
        //                 size: this.generateRandomSize(),
        //                 type: options.type || 'يدوي',
        //                 status: 'جاري الإنشاء',
        //                 verified: false,
        //                 encrypted: options.encrypt || this.settings.encryptBackups,
        //                 compressed: options.compress || this.settings.compressBackups
        //             };
                    
        //             this.backups.unshift(newBackup);
        //             this.saveToStorage();
                    
        //             // Simulate backup process
        //             setTimeout(() => {
        //                 newBackup.status = 'مكتمل';
        //                 newBackup.verified = true;
        //                 this.saveToStorage();
        //                 resolve(newBackup);
        //             }, 3000);
        //         });
        //     }
            
        //     deleteBackup(id) {
        //         this.backups = this.backups.filter(backup => backup.id !== id);
        //         this.saveToStorage();
        //         return true;
        //     }
            
        //     verifyBackup(id) {
        //         const backup = this.backups.find(b => b.id === id);
        //         if (backup) {
        //             backup.status = 'جاري التحقق';
        //             this.saveToStorage();
                    
        //             setTimeout(() => {
        //                 backup.status = 'مكتمل';
        //                 backup.verified = true;
        //                 this.saveToStorage();
        //                 this.refreshBackupTable();
        //             }, 2000);
                    
        //             return true;
        //         }
        //         return false;
        //     }
            
        //     restoreBackup(id) {
        //         return new Promise((resolve, reject) => {
        //             const backup = this.backups.find(b => b.id === id);
        //             if (backup && backup.verified) {
        //                 // Simulate restore process
        //                 setTimeout(() => {
        //                     resolve(backup);
        //                 }, 2000);
        //             } else {
        //                 reject('النسخة غير متاحة أو غير محققة');
        //             }
        //         });
        //     }
            
        //     cleanupOldBackups() {
        //         const cutoffDate = new Date();
        //         cutoffDate.setDate(cutoffDate.getDate() - this.settings.retentionDays);
                
        //         const initialCount = this.backups.length;
        //         this.backups = this.backups.filter(backup => {
        //             const backupDate = new Date(backup.date);
        //             return backupDate > cutoffDate;
        //         });
                
        //         this.saveToStorage();
        //         return initialCount - this.backups.length;
        //     }
            
        //     // Schedule Management
        //     addSchedule(schedule) {
        //         schedule.id = Date.now();
        //         this.schedules.push(schedule);
        //         this.saveToStorage();
        //         return schedule;
        //     }
            
        //     updateSchedule(id, updates) {
        //         const schedule = this.schedules.find(s => s.id === id);
        //         if (schedule) {
        //             Object.assign(schedule, updates);
        //             this.saveToStorage();
        //             return schedule;
        //         }
        //         return null;
        //     }
            
        //     deleteSchedule(id) {
        //         this.schedules = this.schedules.filter(s => s.id !== id);
        //         this.saveToStorage();
        //         return true;
        //     }
            
        //     // Settings Management
        //     updateSettings(newSettings) {
        //         Object.assign(this.settings, newSettings);
        //         this.saveToStorage();
        //         return this.settings;
        //     }
            
        //     // Utility Methods
        //     generateRandomSize() {
        //         const sizes = ['1.8 GB', '2.1 GB', '2.4 GB', '2.7 GB', '3.2 GB'];
        //         return sizes[Math.floor(Math.random() * sizes.length)];
        //     }
            
        //     getBackupTypeClass(type) {
        //         const typeMap = {
        //             'تلقائي': 'primary',
        //             'مجدول': 'info',
        //             'يدوي': 'secondary'
        //         };
        //         return typeMap[type] || 'secondary';
        //     }
            
        //     getStatusClass(status) {
        //         const statusMap = {
        //             'مكتمل': 'success',
        //             'جاري الإنشاء': 'warning',
        //             'جاري التحقق': 'warning',
        //             'فشل': 'danger'
        //         };
        //         return statusMap[status] || 'secondary';
        //     }
            
        //     // UI Update Methods
        //     refreshBackupTable() {
        //         const tbody = document.getElementById('backupTableBody');
        //         if (!tbody) return;
                
        //         tbody.innerHTML = this.backups.map(backup => `
        //             <tr>
        //                 <td>${backup.filename}</td>
        //                 <td>${backup.date}</td>
        //                 <td>${backup.size}</td>
        //                 <td><span class="badge bg-${this.getBackupTypeClass(backup.type)}">${backup.type}</span></td>
        //                 <td><span class="badge bg-${this.getStatusClass(backup.status)}">${backup.status}</span></td>
        //                 <td>
        //                     <button class="btn btn-sm btn-success me-1" onclick="downloadBackup(${backup.id})" title="تحميل" ${backup.status !== 'مكتمل' ? 'disabled' : ''}>
        //                         <i class="fas fa-download"></i>
        //                     </button>
        //                     <button class="btn btn-sm btn-warning me-1" onclick="restoreFromBackup(${backup.id})" title="استعادة" ${backup.status !== 'مكتمل' ? 'disabled' : ''}>
        //                         <i class="fas fa-undo"></i>
        //                     </button>
        //                     <button class="btn btn-sm btn-info me-1" onclick="verifyBackup(${backup.id})" title="التحقق">
        //                         <i class="fas fa-check-circle"></i>
        //                     </button>
        //                     <button class="btn btn-sm btn-danger" onclick="deleteBackup(${backup.id})" title="حذف">
        //                         <i class="fas fa-trash"></i>
        //                     </button>
        //                 </td>
        //             </tr>
        //         `).join('');
        //     }
            
        //     refreshScheduleList() {
        //         const scheduleList = document.getElementById('scheduleList');
        //         if (!scheduleList) return;
                
        //         scheduleList.innerHTML = this.schedules.map(schedule => `
        //             <div class="schedule-item">
        //                 <div class="schedule-info">
        //                     <div class="schedule-name">${schedule.name}</div>
        //                     <div class="schedule-details">
        //                         ${this.getScheduleTypeText(schedule.type)} في الساعة ${schedule.time} - ${this.getBackupTypeText(schedule.backupType)}
        //                         ${schedule.compress ? ' - مضغوط' : ''}
        //                         ${schedule.encrypt ? ' - مشفر' : ''}
        //                     </div>
        //                 </div>
        //                 <div class="schedule-actions">
        //                     <button type="button" class="btn btn-sm btn-outline-primary" onclick="editSchedule(${schedule.id})">
        //                         <i class="fas fa-edit"></i>
        //                     </button>
        //                     <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteSchedule(${schedule.id})">
        //                         <i class="fas fa-trash"></i>
        //                     </button>
        //                 </div>
        //             </div>
        //         `).join('');
        //     }
            
        //     getScheduleTypeText(type) {
        //         const typeMap = {
        //             'daily': 'كل يوم',
        //             'weekly': 'كل أسبوع',
        //             'monthly': 'كل شهر'
        //         };
        //         return typeMap[type] || type;
        //     }
            
        //     getBackupTypeText(type) {
        //         const typeMap = {
        //             'full': 'نسخة كاملة',
        //             'incremental': 'نسخة تزايدية',
        //             'differential': 'نسخة تفاضلية'
        //         };
        //         return typeMap[type] || type;
        //     }
            
        //     loadSettingsToForm() {
        //         const form = document.getElementById('settingsForm');
        //         if (!form) return;
                
        //         document.getElementById('autoBackupEnabled').checked = this.settings.autoBackupEnabled;
        //         document.getElementById('backupFrequency').value = this.settings.backupFrequency;
        //         document.getElementById('backupTime').value = this.settings.backupTime;
        //         document.getElementById('backupPath').value = this.settings.backupPath;
        //         document.getElementById('retentionDays').value = this.settings.retentionDays;
        //         document.getElementById('encryptBackups').checked = this.settings.encryptBackups;
        //         document.getElementById('compressBackups').checked = this.settings.compressBackups;
        //     }
        // }
        
        // // Initialize the backup system
        // const backupSystem = new BackupSystem();
        
        // // ===== UI Event Handlers =====
        // document.addEventListener('DOMContentLoaded', function() {
        //     const navToggle = document.getElementById('navToggle');
        //     const floatingNav = document.getElementById('floatingNav');
            
        //     // Navigation toggle functionality
        //     navToggle.addEventListener('click', function() {
        //         floatingNav.classList.toggle('show');
                
        //         const icon = navToggle.querySelector('i');
        //         if (floatingNav.classList.contains('show')) {
        //             icon.className = 'fas fa-times';
        //         } else {
        //             icon.className = 'fas fa-bars';
        //         }
        //     });

        //     // Close floating nav when clicking outside
        //     document.addEventListener('click', function(event) {
        //         if (!navToggle.contains(event.target) && !floatingNav.contains(event.target)) {
        //             floatingNav.classList.remove('show');
        //             const icon = navToggle.querySelector('i');
        //             icon.className = 'fas fa-bars';
        //         }
        //     });
            
        //     // Initialize UI
        //     backupSystem.refreshBackupTable();
        //     backupSystem.refreshScheduleList();
        // });

        // function createBackup() {
        //     showConfirmModal(
        //         'إنشاء نسخة احتياطية',
        //         'هل أنت متأكد من إنشاء نسخة احتياطية جديدة؟ قد تستغرق هذه العملية بعض الوقت.',
        //         'fas fa-cloud-upload-alt',
        //         'primary',
        //         function() {
        //             const modal = new bootstrap.Modal(document.getElementById('backupProgressModal'));
        //             modal.show();
                    
        //             backupSystem.createBackup().then(backup => {
        //                 simulateBackupProgress(() => {
        //                     backupSystem.refreshBackupTable();
        //                 });
        //             });
        //         }
        //     );
        // }

        // function simulateBackupProgress(onComplete) {
        //     const progressBar = document.getElementById('backupProgress');
        //     const statusText = document.getElementById('backupStatus');
        //     let progress = 0;
            
        //     const interval = setInterval(() => {
        //         progress += Math.random() * 15;
        //         if (progress > 100) progress = 100;
                
        //         progressBar.style.width = progress + '%';
                
        //         if (progress < 30) {
        //             statusText.textContent = 'جاري تحضير البيانات...';
        //         } else if (progress < 60) {
        //             statusText.textContent = 'جاري ضغط البيانات...';
        //         } else if (progress < 90) {
        //             statusText.textContent = 'جاري حفظ النسخة...';
        //         } else if (progress >= 100) {
        //             statusText.textContent = 'تم إنشاء النسخة الاحتياطية بنجاح!';
        //             clearInterval(interval);
                    
        //             setTimeout(() => {
        //                 const modal = bootstrap.Modal.getInstance(document.getElementById('backupProgressModal'));
        //                 modal.hide();
        //                 showSuccessAlert('تم إنشاء النسخة الاحتياطية بنجاح');
        //                 if (onComplete) onComplete();
        //             }, 2000);
        //         }
        //     }, 500);
        // }

        // function restoreBackup() {
        //     const modal = new bootstrap.Modal(document.getElementById('restoreBackupModal'));
        //     modal.show();
        // }

        // function startRestore() {
        //     const fileInput = document.getElementById('restoreFile');
        //     const verifyCheckbox = document.getElementById('verifyBeforeRestore');
        //     const createBackupCheckbox = document.getElementById('createBackupBeforeRestore');
            
        //     if (!fileInput.files.length) {
        //         showErrorAlert('يرجى اختيار ملف النسخة الاحتياطية');
        //         return;
        //     }
            
        //     const modal = bootstrap.Modal.getInstance(document.getElementById('restoreBackupModal'));
        //     modal.hide();
            
        //     // Simulate restore process
        //     let steps = [];
        //     if (createBackupCheckbox.checked) {
        //         steps.push('إنشاء نسخة احتياطية من البيانات الحالية...');
        //     }
        //     if (verifyCheckbox.checked) {
        //         steps.push('التحقق من سلامة الملف...');
        //     }
        //     steps.push('استعادة البيانات...');
        //     steps.push('التحقق من سلامة البيانات المستعادة...');
            
        //     simulateRestoreProcess(steps);
        // }
        
        // function simulateRestoreProcess(steps) {
        //     let currentStep = 0;
        //     const interval = setInterval(() => {
        //         if (currentStep < steps.length) {
        //             showInfoAlert(steps[currentStep]);
        //             currentStep++;
        //         } else {
        //             clearInterval(interval);
        //             showSuccessAlert('تم استعادة النسخة الاحتياطية بنجاح');
        //         }
        //     }, 2000);
        // }

        // function backupSettings() {
        //     backupSystem.loadSettingsToForm();
        //     const modal = new bootstrap.Modal(document.getElementById('backupSettingsModal'));
        //     modal.show();
        // }

        // function saveSettings() {
        //     const newSettings = {
        //         autoBackupEnabled: document.getElementById('autoBackupEnabled').checked,
        //         backupFrequency: document.getElementById('backupFrequency').value,
        //         backupTime: document.getElementById('backupTime').value,
        //         backupPath: document.getElementById('backupPath').value,
        //         retentionDays: parseInt(document.getElementById('retentionDays').value),
        //         encryptBackups: document.getElementById('encryptBackups').checked,
        //         compressBackups: document.getElementById('compressBackups').checked
        //     };
            
        //     backupSystem.updateSettings(newSettings);
            
        //     const modal = bootstrap.Modal.getInstance(document.getElementById('backupSettingsModal'));
        //     modal.hide();
        //     showSuccessAlert('تم حفظ إعدادات النسخ الاحتياطي بنجاح');
        // }

        // function addNewSchedule() {
        //     // Clear form
        //     document.getElementById('addScheduleForm').reset();
        //     const modal = new bootstrap.Modal(document.getElementById('addScheduleModal'));
        //     modal.show();
        // }

        // function saveNewSchedule() {
        //     const form = document.getElementById('addScheduleForm');
        //     if (form.checkValidity()) {
        //         const newSchedule = {
        //             name: document.getElementById('scheduleName').value,
        //             type: document.getElementById('scheduleType').value,
        //             time: document.getElementById('scheduleTime').value,
        //             backupType: document.getElementById('backupType').value,
        //             enabled: true,
        //             compress: document.getElementById('scheduleCompress').checked,
        //             encrypt: document.getElementById('scheduleEncrypt').checked
        //         };
                
        //         backupSystem.addSchedule(newSchedule);
        //         backupSystem.refreshScheduleList();
                
        //         const modal = bootstrap.Modal.getInstance(document.getElementById('addScheduleModal'));
        //         modal.hide();
        //         showSuccessAlert('تم إضافة الجدولة الجديدة بنجاح');
        //     } else {
        //         form.reportValidity();
        //     }
        // }

        // function editSchedule(id) {
        //     const schedule = backupSystem.schedules.find(s => s.id === id);
        //     if (schedule) {
        //         // Populate form with schedule data
        //         document.getElementById('scheduleName').value = schedule.name;
        //         document.getElementById('scheduleType').value = schedule.type;
        //         document.getElementById('scheduleTime').value = schedule.time;
        //         document.getElementById('backupType').value = schedule.backupType;
        //         document.getElementById('scheduleCompress').checked = schedule.compress;
        //         document.getElementById('scheduleEncrypt').checked = schedule.encrypt;
                
        //         // Change save function to update
        //         const saveButton = document.querySelector('#addScheduleModal .btn-primary');
        //         saveButton.onclick = function() {
        //             updateSchedule(id);
        //         };
                
        //         const modal = new bootstrap.Modal(document.getElementById('addScheduleModal'));
        //         modal.show();
        //     }
        // }
        
        // function updateSchedule(id) {
        //     const form = document.getElementById('addScheduleForm');
        //     if (form.checkValidity()) {
        //         const updates = {
        //             name: document.getElementById('scheduleName').value,
        //             type: document.getElementById('scheduleType').value,
        //             time: document.getElementById('scheduleTime').value,
        //             backupType: document.getElementById('backupType').value,
        //             compress: document.getElementById('scheduleCompress').checked,
        //             encrypt: document.getElementById('scheduleEncrypt').checked
        //         };
                
        //         backupSystem.updateSchedule(id, updates);
        //         backupSystem.refreshScheduleList();
                
        //         const modal = bootstrap.Modal.getInstance(document.getElementById('addScheduleModal'));
        //         modal.hide();
        //         showSuccessAlert('تم تحديث الجدولة بنجاح');
                
        //         // Reset save function
        //         const saveButton = document.querySelector('#addScheduleModal .btn-primary');
        //         saveButton.onclick = saveNewSchedule;
        //     } else {
        //         form.reportValidity();
        //     }
        // }

        // function deleteSchedule(id) {
        //     showConfirmModal(
        //         'حذف الجدولة',
        //         'هل أنت متأكد من حذف هذه الجدولة؟',
        //         'fas fa-trash',
        //         'danger',
        //         function() {
        //             backupSystem.deleteSchedule(id);
        //             backupSystem.refreshScheduleList();
        //             showSuccessAlert('تم حذف الجدولة بنجاح');
        //         }
        //     );
        // }

        // function downloadBackup(id) {
        //     const backup = backupSystem.backups.find(b => b.id === id);
        //     if (backup) {
        //         // Simulate download
        //         showInfoAlert(`جاري تحميل ${backup.filename}...`);
        //         setTimeout(() => {
        //             showSuccessAlert(`تم تحميل ${backup.filename} بنجاح`);
        //         }, 2000);
        //     }
        // }

        // function restoreFromBackup(id) {
        //     const backup = backupSystem.backups.find(b => b.id === id);
        //     if (backup) {
        //         showConfirmModal(
        //             'استعادة من النسخة',
        //             `هل أنت متأكد من استعادة النسخة ${backup.filename}؟ ستؤدي هذه العملية إلى استبدال البيانات الحالية.`,
        //             'fas fa-undo',
        //             'warning',
        //             function() {
        //                 backupSystem.restoreBackup(id).then(() => {
        //                     showSuccessAlert('تم بدء عملية الاستعادة بنجاح');
        //                 }).catch(error => {
        //                     showErrorAlert(error);
        //                 });
        //             }
        //         );
        //     }
        // }

        // function verifyBackup(id) {
        //     if (backupSystem.verifyBackup(id)) {
        //         showInfoAlert('جاري التحقق من سلامة النسخة الاحتياطية...');
        //         setTimeout(() => {
        //             showSuccessAlert('تم التحقق من سلامة النسخة الاحتياطية بنجاح');
        //         }, 2000);
        //     }
        // }

        // function deleteBackup(id) {
        //     const backup = backupSystem.backups.find(b => b.id === id);
        //     if (backup) {
        //         showConfirmModal(
        //             'حذف النسخة الاحتياطية',
        //             `هل أنت متأكد من حذف النسخة ${backup.filename}؟ لا يمكن التراجع عن هذه العملية.`,
        //             'fas fa-trash',
        //             'danger',
        //             function() {
        //                 backupSystem.deleteBackup(id);
        //                 backupSystem.refreshBackupTable();
        //                 showSuccessAlert('تم حذف النسخة الاحتياطية بنجاح');
        //             }
        //         );
        //     }
        // }

        // function cleanupOldBackups() {
        //     showConfirmModal(
        //         'تنظيف النسخ القديمة',
        //         `هل أنت متأكد من حذف النسخ الاحتياطية الأقدم من ${backupSystem.settings.retentionDays} يوم؟`,
        //         'fas fa-trash',
        //         'warning',
        //         function() {
        //             const deletedCount = backupSystem.cleanupOldBackups();
        //             backupSystem.refreshBackupTable();
        //             showSuccessAlert(`تم حذف ${deletedCount} نسخة احتياطية قديمة`);
        //         }
        //     );
        // }

        // function refreshBackupList() {
        //     backupSystem.refreshBackupTable();
        //     showSuccessAlert('تم تحديث قائمة النسخ الاحتياطية');
        // }

        // // ===== Utility Functions =====
        // function showConfirmModal(title, message, iconClass, iconType, onConfirm) {
        //     const modalHtml = `
        //         <div class="modal fade" id="tempConfirmModal" tabindex="-1">
        //             <div class="modal-dialog">
        //                 <div class="modal-content">
        //                     <div class="modal-header">
        //                         <h5 class="modal-title">
        //                             <i class="${iconClass} text-${iconType} me-2"></i>
        //                             ${title}
        //                         </h5>
        //                         <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        //                     </div>
        //                     <div class="modal-body">
        //                         <p>${message}</p>
        //                     </div>
        //                     <div class="modal-footer">
        //                         <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
        //                         <button type="button" class="btn btn-${iconType}" id="tempConfirmButton">تأكيد</button>
        //                     </div>
        //                 </div>
        //             </div>
        //         </div>
        //     `;
            
        //     document.body.insertAdjacentHTML('beforeend', modalHtml);
        //     const modal = new bootstrap.Modal(document.getElementById('tempConfirmModal'));
            
        //     document.getElementById('tempConfirmButton').onclick = function() {
        //         modal.hide();
        //         if (onConfirm) onConfirm();
        //     };
            
        //     modal.show();
            
        //     // Remove modal after hiding
        //     document.getElementById('tempConfirmModal').addEventListener('hidden.bs.modal', function() {
        //         this.remove();
        //     });
        // }

        // function showSuccessAlert(message) {
        //     showAlert(message, 'success', 'fas fa-check-circle');
        // }
        
        // function showErrorAlert(message) {
        //     showAlert(message, 'danger', 'fas fa-exclamation-circle');
        // }
        
        // function showInfoAlert(message) {
        //     showAlert(message, 'info', 'fas fa-info-circle');
        // }
        
        // function showAlert(message, type, icon) {
        //     const alert = document.createElement('div');
        //     alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        //     alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        //     alert.innerHTML = `
        //         <i class="${icon} me-2"></i>
        //         ${message}
        //         <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        //     `;
            
        //     document.body.appendChild(alert);
            
        //     setTimeout(() => {
        //         if (alert.parentNode) {
        //             alert.parentNode.removeChild(alert);
        //         }
        //     }, 3000);
        // }
    </script>
</body>
</html>

